#!/bin/env python3
# vim: syntax=python

import argparse
import os
import subprocess
import sys
from pathlib import Path

args = None

def parse_args():
  global args
  parser = argparse.ArgumentParser(description='Generate multiple GNU gtags '
      'databases to be used by pglobal.',
      formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  parser.add_argument('-n', type=int, default=16,
      help='Number of parallel instances')
  parser.add_argument('-d', '--dbpath',
      help='Path to generate the 1..n gtags databases at. If not set, the '
           'directory of "files" is used')
  parser.add_argument('files',
      help='Path of the file containing the list of files to process')
  parser.add_argument('gtags_args', nargs=argparse.REMAINDER,
      help='Arguments to be passed to each "gtags" instance')
  args = parser.parse_args()
  if not args.dbpath:
    args.dbpath = os.path.dirname(args.files)
  if args.n < 1 or args.n > 1000:
    sys.exit('-n %d is out of range 1..1000' % args.n)

def run_instances():
  processes = []

  with open(args.files, 'r') as fp:
    files = fp.readlines()
  chunk = len(files) / args.n
  cur = 0

  for n in range(args.n):
    chunk_dir = os.path.join(args.dbpath, '%03d' % n)
    Path(chunk_dir).mkdir(exist_ok=True)
    chunk_files = os.path.join(chunk_dir, 'files')

    with open(chunk_files, 'w') as fp:
      max_cur = len(files) if n == (args.n - 1) else int((n + 1) * chunk)
      while cur < max_cur:
        fp.write(files[cur])
        cur += 1

    gtags_cmd = ['gtags'] + args.gtags_args + ['-f', chunk_files, chunk_dir]
    processes.append(subprocess.Popen(gtags_cmd, stdout=subprocess.PIPE,
        stderr=subprocess.PIPE))

  for p in processes:
    out, err = p.communicate()
    sys.stdout.buffer.write(out)
    sys.stderr.buffer.write(err)

def main():
  parse_args()
  run_instances()

if __name__ == '__main__':
  main()
